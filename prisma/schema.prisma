datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  topics          Topic[]
  topicCategories TopicCategory[]
  pages           Page[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model TopicCategory {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(255)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  topic  Topic[]
}

model Topic {
  id         Int           @id @default(autoincrement())
  name       String        @db.VarChar(255)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  category   TopicCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  page       Page[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([name, userId])
}

model Page {
  id        Int      @id @default(autoincrement())
  public    Boolean  @default(false)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   Int
  slug      String   @unique
  entries   Entry[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([slug, topicId])
}

model Entry {
  id        Int      @id @default(autoincrement())
  content   Json
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId    Int
  draft     Boolean  @default(true)
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
